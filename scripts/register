#!/bin/bash

if [ ! -f "dist/commands/Register.js" ]; then
  npm run build
fi

STAKE=20
FUNDS=10
MNEMONIC=""
ACCOUNT=""

function register() {
  echo "$@"
  PARSED_ARGUMENTS=$(getopt -a -n alphabet -o h --long stake:,funds:,account:,mnemonic:,help -- "$@")
  VALID_ARGUMENTS=$?
  if [ "$VALID_ARGUMENTS" != "0" ]; then
    showUsage
    exit 1
  fi
  eval set -- "$PARSED_ARGUMENTS"
  while :; do
    case "$1" in
    --stake)
      STAKE=$(echo "$2" | xargs)
      shift
      shift
      ;;
    --funds)
      FUNDS=$(echo "$2" | xargs)
      shift
      shift
      ;;
    --account)
      ACCOUNT=$(echo "$2" | xargs)
      shift
      shift
      ;;
    --mnemonic)
      MNEMONIC=$(echo "$2" | xargs)
      shift
      shift
      ;;
    -h | --help)
      showUsage
      exit 0
      shift
      ;;
    # -- means the end of the arguments; drop this, and break out of the while loop
    --)
      shift
      break
      ;;
    # If invalid options were passed, then getopt should have reported an error,
    # which we checked as VALID_ARGUMENTS when getopt was called...
    *)
      echo "Unexpected option: $1 - this should not happen."
      showUsage
      exit 1
      ;;
    esac
  done

}

register "$0" "$@"

if [ "${STAKE}" == "" ]; then
  echo "Error, stake has to be specified!"
  exit 1
fi

if [ "${FUNDS}" == "" ]; then
  echo "Error, funds has to be specified!"
  exit 1
fi

if [ "${ACCOUNT}" == "" ] && [ "${MNEMONIC}" != "" ] || [ "${ACCOUNT}" != "" ] && [ "${MNEMONIC}" == "" ]; then
  echo "Error, account and mnemonic are both necessary!"
  exit 1
fi

if [ "${ACCOUNT}" != "" ] && [ "${MNEMONIC}" != "" ]; then
  node dist/commands/Register.js --config server-config.json --funds="${FUNDS}" --stake="${STAKE}" --account="${ACCOUNT}" --mnemonic="${MNEMONIC}"
else
  node dist/commands/Register.js --config server-config.json --funds="${FUNDS}" --stake="${STAKE}"
fi
